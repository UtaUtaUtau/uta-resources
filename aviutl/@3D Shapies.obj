@3-6 Sided Polygon Faced Solids
--track0:Size,0,1024,100
--track1:Quality,0,1000,100
--track2:Line Width,0,500,500
--track3:Alpha,0,100,100
--Dialog:Points,points=rhombicDodecahedronPoints;Faces,faces=rhombicDodecahedronFaces;Color/col,col=0xffffff;Individual Color/chk,sepCol=0;Triangle Color/col,triCol=0xff00ff;Square Color/col,sqrCol=0x00ffff;Pentagon Color/col,penCol=0xffff00;Debug Mode/chk,debugMode=0;
function deepcopy(o)
	if type(o) ~= "table" then
		return o
	else
		local t = {}
		for k, v in pairs(o) do
			t[k] = deepcopy(v)
		end
		return t
	end
end

x = math.sqrt(3) / 3
d = math.sqrt(3) / 6
h = math.sqrt(6) / 3
root2 = math.sqrt(2)
root2m1 = root2 - 1
hroot2 = root2 / 2
root2t2p1o7 = (2 * root2 + 1) / 7
phi = (1 + math.sqrt(5)) / 2
phi3 = phi * 3
phi2 = phi * 2
phi2p1 = 2 * phi + 1
phiSq = phi * phi
phip2 = 2 + phi
iphi = 1 / phi
tri = 1.839286755214161
itri = 1 / tri
tri2p1 = 2 * tri + 1
triSq = tri * tri
triCb = triSq * tri
--Platonic Solids
tetrahedronPoints = {{x, 0, -h / 4}, {-d, 1 / 2, -h / 4}, {-d, -1 / 2, -h / 4}, {0, 0, 3 * h / 4}}
tetrahedronFaces = {{1, 2, 3}, {1, 3, 4}, {1, 2, 4}, {2, 3, 4}}

cubePoints = {{1, 1, 1}, {-1, 1, 1}, {1, -1, 1}, {-1, -1, 1}, {1, 1, -1}, {-1, 1, -1}, {1, -1, -1}, {-1, -1, -1}}
for i, point in pairs(cubePoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
cubeFaces = {{1, 3, 4, 2}, {1, 3, 7, 5}, {3, 4, 8, 7}, {4, 8, 6, 2}, {2, 6, 5, 1}, {7, 8, 6, 5}}

octahedronPoints = {{1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1}}
for i, point in pairs(octahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / root2
	end
end
octahedronFaces = {{1, 4, 6}, {2, 4, 6}, {2, 4, 5}, {5, 4, 1}, {1, 3, 6}, {6, 3, 2}, {5, 3, 2}, {5, 3, 1}}

dodecahedronPoints = {{1, 1, 1}, {-1, 1, 1}, {1, -1, 1}, {-1, -1, 1}, {1, 1, -1}, {-1, 1, -1}, {1, -1, -1}, {-1, -1, -1}, {0, phi, iphi}, {0, -phi, iphi}, {0, phi, -iphi}, {0, -phi, -iphi}, {iphi, 0, phi}, {-iphi, 0, phi}, {iphi, 0, -phi}, {-iphi, 0,- phi}, {phi, iphi, 0}, {-phi, iphi, 0}, {phi, -iphi, 0}, {-phi, -iphi, 0}}
for i, point in pairs(dodecahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / (math.sqrt(5) - 1)
	end
end
dodecahedronFaces = {{12, 7, 15, 16, 8}, {7, 19, 17, 5, 15}, {15, 5, 11, 6, 16}, {16, 6, 18, 20, 8}, {8, 20, 4, 10, 12}, {12, 10, 3, 19, 7}, {10, 4, 14, 13, 3}, {3, 13, 1, 17, 19}, {13, 14, 2, 9, 1}, {1, 9, 11, 5, 17}, {9, 2, 18, 6, 11}, {4, 20, 18, 2, 14}}

icosahedronPoints = {{0, 1, phi}, {0, -1, phi}, {0, 1, -phi}, {0, -1, -phi}, {phi, 0, 1}, {-phi, 0, 1}, {phi, 0, -1}, {-phi, 0, -1}, {1, phi, 0}, {-1, phi, 0}, {1, -phi, 0}, {-1, -phi, 0}}
for i, point in pairs(icosahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
icosahedronFaces = {{4, 12, 11}, {4, 11, 7}, {4, 7, 3}, {4, 3, 8}, {4, 8, 12}, {12, 8, 6}, {12, 6, 2}, {12, 2, 11}, {11, 2, 5}, {11, 5, 7}, {7, 5, 9}, {7, 9, 3}, {3, 9, 10}, {3, 10, 8}, {8, 10, 6}, {6, 10, 1}, {6, 1, 2}, {2, 1, 5}, {5, 1, 9}, {9, 1, 10}}

--Archimedean Solids
truncatedTetrahedronPoints = {{3,1,1}, {1,3,1}, {1,1,3}, {-3,-1,1}, {-1,-3,1}, {-1,-1,3}, {-3,1,-1}, {-1,3,-1}, {-1,1,-3}, {3,-1,-1}, {1,-3,-1}, {1,-1,-3}}
for i, point in pairs(truncatedTetrahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / math.sqrt(8)
	end
end
truncatedTetrahedronFaces = {{1, 2, 3}, {4, 5, 6}, {7, 8 ,9}, {10, 11, 12}, {1, 2, 8, 9, 12, 10}, {5, 11, 12, 9, 7, 4}, {11, 5, 6, 3, 1, 10}, {6, 4, 7, 8, 2, 3}}

cuboctahedronPoints = {{1, 1, 0}, {-1, 1, 0}, {1, -1, 0}, {-1, -1, 0}, {1, 0, 1}, {-1, 0, 1}, {1, 0, -1}, {-1, 0, -1}, {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}}
for i, point in pairs(cuboctahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / root2
	end
end
cuboctahedronFaces = {{3, 7, 12}, {7, 1, 11}, {8, 11, 2}, {12, 8, 4}, {4, 6, 10}, {2, 6, 9}, {5, 9, 1}, {10, 5, 3}, {10, 3, 12, 4}, {11, 2, 9, 1}, {10, 6, 9, 5}, {1, 5, 3 ,7}, {2, 6, 4, 8}, {7, 12, 8, 11}}

truncatedOctahedronPoints = {{0, 1, 2}, {0, -1, 2}, {0, 1, -2}, {0, -1, -2}, {0, 2, 1}, {0, -2, 1}, {0, 2, -1}, {0, -2, -1}, {1, 0, 2}, {-1, 0, 2}, {1, 0, -2}, {-1, 0, -2}, {2, 0, 1}, {-2, 0, 1}, {2, 0, -1}, {-2, 0, -1}, {1, 2, 0}, {-1, 2, 0}, {1, -2, 0}, {-1, -2, 0}, {2, 1, 0}, {-2, 1, 0}, {2, -1, 0}, {-2, -1, 0}}
for i, point in pairs(truncatedOctahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / root2
	end
end
truncatedOctahedronFaces = {{4, 11, 3, 12}, {23, 13, 21, 15}, {5, 17, 7, 18}, {6, 19, 8, 20}, {2, 9, 1, 10}, {24, 16, 22, 14}, {8, 4, 12, 16, 24, 20}, {16, 12, 3, 7, 18, 22}, {11, 15, 23, 19, 8, 4}, {11, 15, 21, 17, 7, 3}, {13, 9, 2, 6, 19, 23}, {13, 9, 1, 5, 17, 21}, {10, 14, 24, 20, 6, 2}, {10, 14, 22, 18, 5, 1}}

rhombicuboctahedronPoints = {{1, 1, (1 + root2)}, {1, 1, -(1 + root2)}, {1, -1, (1 + root2)}, {1, -1, -(1 + root2)}, {-1, 1, (1 + root2)}, {-1, 1, -(1 + root2)}, {-1, -1, (1 + root2)}, {-1, -1, -(1 + root2)}, {(1 + root2), 1, 1}, {(1 + root2), 1, -1}, {(1 + root2), -1, 1}, {(1 + root2), -1, -1}, {-(1 + root2), 1, 1}, {-(1 + root2), 1, -1}, {-(1 + root2), -1, 1}, {-(1 + root2), -1, -1}, {1, (1 + root2), 1}, {1, (1 + root2), -1}, {1, -(1 + root2), 1}, {1, -(1 + root2), -1}, {-1, (1 + root2), 1}, {-1, (1 + root2), -1}, {-1, -(1 + root2), 1}, {-1, -(1 + root2), -1}}
for i, point in pairs(rhombicuboctahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
rhombicuboctahedronFaces = {{16, 24, 8}, {14, 6, 22}, {20, 4, 12}, {2, 10, 18}, {13, 5, 21}, {1, 9, 17}, {23, 15, 7}, {19, 3, 11}, {24, 23, 19, 20}, {24, 23, 15, 16}, {23, 19, 3, 7}, {19, 20, 12, 11}, {15, 16, 14, 13}, {15, 7, 5, 13}, {7, 5, 1, 3}, {3, 11, 9, 1}, {11, 12, 10, 9}, {5, 1, 17, 21}, {14, 13, 21, 22}, {9, 10, 18, 17}, {24, 20, 4, 8}, {16, 8, 6, 14}, {4, 12, 10, 2}, {6, 2, 18, 22}, {8, 4, 2, 6}, {18, 17, 21, 22}}

icosidodecahedronPoints = {{2, 0, 0}, {-2, 0, 0}, {0, 2, 0}, {0, -2, 0}, {0, 0, 2}, {0, 0, -2}, {phi, iphi, 1}, {phi, iphi, -1}, {phi, -iphi, 1}, {phi, -iphi, -1}, {-phi, iphi, 1}, {-phi, iphi, -1}, {-phi, -iphi, 1}, {-phi, -iphi, -1}, {1, phi, iphi}, {1, phi, -iphi}, {1, -phi, iphi}, {1, -phi, -iphi}, {-1, phi, iphi}, {-1, phi, -iphi}, {-1, -phi, iphi}, {-1, -phi, -iphi}, {iphi, 1, phi}, {iphi, 1, -phi}, {iphi, -1, phi}, {iphi, -1, -phi}, {-iphi, 1, phi}, {-iphi, 1, -phi}, {-iphi, -1, phi}, {-iphi, -1, -phi}}
for i, point in pairs(truncatedOctahedronPoints) do
	for j = 1, 3 do
		point[j] = phi * point[j] / 2
	end
end
icosidodecahedronFaces = {{6, 26, 10, 8, 24}, {6, 30, 14, 12, 28}, {3, 20, 28, 24, 16}, {4, 22, 30, 26, 18}, {1, 7, 15, 16, 8}, {1, 9, 17, 18, 10}, {5, 25, 9, 7, 23}, {3, 19, 27, 23, 15}, {5, 29, 13, 11, 27}, {4, 21, 29, 25, 17}, {2, 12, 20, 19, 11}, {2, 13, 21, 22, 14}, {6, 28, 24}, {6, 26, 30}, {28, 20, 12}, {24, 8, 16}, {26, 18, 10}, {30, 22, 14}, {14, 12, 2}, {10, 8, 1}, {5, 23, 27}, {5, 25, 29}, {29, 21, 13}, {25, 9, 17}, {23, 15, 7}, {27, 11, 19}, {11, 13, 2}, {7, 9, 1}, {4, 18, 17}, {3, 15, 16}, {3, 20, 19}, {4, 21, 22}}

snubCubePoints = {{-1, -itri, -tri}, {-1, itri, tri}, {1, -itri, tri}, {1, itri, -tri}, {itri, 1, tri}, {itri, -1, -tri}, {-itri, 1, -tri}, {-itri, -1, tri}, {1, tri, itri}, {1, -tri, -itri}, {-1, tri, -itri}, {-1, -tri, itri}, {tri, itri, 1}, {tri, -itri, -1}, {-tri, itri, -1}, {-tri, -itri, 1}, {-itri, -tri, -1}, {-itri, tri, 1}, {itri, -tri, 1}, {itri, tri, -1}, {-tri, -1, -itri}, {-tri, 1, itri}, {tri, -1, itri}, {tri, 1, -itri}}
for i, point in pairs(snubCubePoints) do
	for j = 1, 3 do
		point[j] = point[j] / math.sqrt(2 + 4 * tri - 2 * tri * tri)
	end
end
snubCubeFaces = {{1, 6, 4, 7}, {14, 24, 13,23}, {11, 20, 9, 18}, {17, 12, 19, 10}, {16, 21, 15, 22}, {8, 3, 5, 2}, {18, 11, 22}, {18, 22, 2}, {18, 5, 2}, {18, 5, 9}, {22, 2, 16}, {16, 2, 8}, {8, 16, 12}, {8, 12, 19}, {16, 12, 21}, {11, 22, 15}, {12, 17, 21}, {8, 19, 3}, {10, 19, 23}, {19, 23, 3}, {23, 3, 13}, {3, 5, 13}, {13, 5, 9}, {24, 13, 9}, {20, 24, 9}, {10, 23, 14}, {10, 6, 14}, {6, 14, 4}, {14, 4, 24}, {4, 24, 20}, {7, 4, 20}, {7, 11, 20}, {17, 10, 6}, {17, 6, 1}, {17, 21, 1}, {21, 1, 15}, {1, 15, 7}, {15, 7, 11}}

snubCubePoints2 = {}
for i, point in pairs(snubCubePoints) do
	snubCubePoints2[i] = {}
	for j = 1, 3 do
		snubCubePoints2[i][j] = -point[j]
	end
end

truncatedIcosahedronPoints = {{0, 1, phi3}, {0, 1, -phi3}, {0, -1, phi3}, {0, -1, -phi3}, {phi3, 0, 1}, {phi3, 0, -1}, {-phi3, 0, 1}, {-phi3, 0, -1}, {1, phi3, 0}, {1, -phi3, 0}, {-1, phi3, 0}, {-1, -phi3, 0}, {1, phip2, phi2}, {1, phip2, -phi2}, {1, -phip2, phi2}, {1, -phip2, -phi2}, {-1, phip2, phi2}, {-1, phip2, -phi2}, {-1, -phip2, phi2}, {-1, -phip2, -phi2}, {phi2, 1, phip2}, {phi2, 1, -phip2}, {phi2, -1, phip2}, {phi2, -1, -phip2}, {-phi2, 1, phip2}, {-phi2, 1, -phip2}, {-phi2, -1, phip2}, {-phi2, -1, -phip2}, {phip2, phi2, 1}, {phip2, phi2, -1}, {phip2, -phi2, 1}, {phip2, -phi2, -1}, {-phip2, phi2, 1}, {-phip2, phi2, -1}, {-phip2, -phi2, 1}, {-phip2, -phi2, -1}, {phi, 2, phi2p1}, {phi, 2, -phi2p1}, {phi, -2, phi2p1}, {phi, -2, -phi2p1}, {-phi, 2, phi2p1}, {-phi, 2, -phi2p1}, {-phi, -2, phi2p1}, {-phi, -2, -phi2p1}, {phi2p1, phi, 2}, {phi2p1, phi, -2}, {phi2p1, -phi, 2}, {phi2p1, -phi, -2}, {-phi2p1, phi, 2}, {-phi2p1, phi, -2}, {-phi2p1, -phi, 2}, {-phi2p1, -phi, -2}, {2, phi2p1, phi}, {2, phi2p1, -phi}, {2, -phi2p1, phi}, {2, -phi2p1, -phi}, {-2, phi2p1, phi}, {-2, phi2p1, -phi}, {-2, -phi2p1, phi}, {-2, -phi2p1, -phi}}
for i, point in pairs(truncatedIcosahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
truncatedIcosahedronFaces = {{4, 44, 20, 16, 40}, {2, 38, 14, 18, 42}, {8, 52, 28, 26, 50}, {51, 7, 49, 25, 27}, {33, 34, 58, 11, 57}, {24, 48, 6, 46, 22}, {5, 47, 23, 21, 45}, {30, 29, 53, 9, 54}, {10, 55, 31, 32, 56}, {12, 60, 36, 35, 59}, {15, 19, 43, 3, 39}, {1, 41, 17, 13, 37}, {1, 3, 43, 27, 25, 41}, {1, 3, 39, 23, 21, 37}, {17, 41, 25, 49, 33, 57}, {13, 17, 57, 11, 9, 53}, {45, 21, 37, 13, 53, 29}, {19, 43, 27, 51, 35, 59}, {55, 15, 39, 23, 47, 31}, {10, 12, 59, 19, 15, 55}, {4, 40, 24, 22, 38, 2}, {4, 2, 42, 26, 28, 44}, {8, 7, 49, 33, 34, 50}, {7, 51, 35, 36, 52, 8}, {58, 34, 50, 26, 42, 18}, {60, 20, 44, 28, 52, 36}, {60, 20, 16, 56, 10, 12}, {14, 54, 9, 11, 58, 18}, {14, 54, 30, 46, 22, 38}, {6, 5, 45, 29, 30, 46}, {32, 31, 47, 5, 6, 48}, {56, 32, 48, 24, 40, 16}}

rhombicosidodecahedronPoints = {{1, 1, phi2p1}, {1, 1, -phi2p1}, {1, -1, phi2p1}, {1, -1, -phi2p1}, {-1, 1, phi2p1}, {-1, 1, -phi2p1}, {-1, -1, phi2p1}, {-1, -1, -phi2p1}, {phi2p1, 1, 1}, {phi2p1, 1, -1}, {phi2p1, -1, 1}, {phi2p1, -1, -1}, {-phi2p1, 1, 1}, {-phi2p1, 1, -1}, {-phi2p1, -1, 1}, {-phi2p1, -1, -1}, {1, phi2p1, 1}, {1, phi2p1, -1}, {1, -phi2p1, 1}, {1, -phi2p1, -1}, {-1, phi2p1, 1}, {-1, phi2p1, -1}, {-1, -phi2p1, 1}, {-1, -phi2p1, -1}, {phiSq, phi, phi2}, {phiSq, phi, -phi2}, {phiSq, -phi, phi2}, {phiSq, -phi, -phi2}, {-phiSq, phi, phi2}, {-phiSq, phi, -phi2}, {-phiSq, -phi, phi2}, {-phiSq, -phi, -phi2}, {phi2, phiSq, phi}, {phi2, phiSq, -phi}, {phi2, -phiSq, phi}, {phi2, -phiSq, -phi}, {-phi2, phiSq, phi}, {-phi2, phiSq, -phi}, {-phi2, -phiSq, phi}, {-phi2, -phiSq, -phi}, {phi, phi2, phiSq}, {phi, phi2, -phiSq}, {phi, -phi2, phiSq}, {phi, -phi2, -phiSq}, {-phi, phi2, phiSq}, {-phi, phi2, -phiSq}, {-phi, -phi2, phiSq}, {-phi, -phi2, -phiSq}, {phip2, 0, phiSq}, {phip2, 0, -phiSq}, {-phip2, 0, phiSq}, {-phip2, 0, -phiSq}, {phiSq, phip2, 0}, {phiSq, -phip2, 0}, {-phiSq, phip2, 0}, {-phiSq, -phip2, 0}, {0, phiSq, phip2}, {0, phiSq, -phip2}, {0, -phiSq, phip2}, {0, -phiSq, -phip2}}
for i, point in pairs(rhombicosidodecahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
rhombicosidodecahedronFaces = {{60, 4, 8}, {6, 2, 58}, {26, 42, 34}, {50, 12, 10}, {44, 28, 36}, {30, 38, 46}, {16, 52, 14}, {40, 48, 32}, {11, 9, 49}, {20, 54, 19}, {53, 17, 18}, {33, 41, 25}, {35, 43, 27}, {1, 5, 57}, {59, 7, 3}, {47, 39, 31}, {51, 15, 13}, {29, 37, 45}, {55, 22, 21}, {3, 7, 5, 1}, {5, 29, 45, 57}, {25, 1, 57, 41}, {23, 24, 56}, {59, 47, 31, 7}, {43, 59, 3, 27}, {31, 39, 15, 51}, {51, 13, 37, 29}, {15, 16, 14, 13}, {23, 56, 39, 47}, {37, 45, 21, 55}, {41, 33, 53, 17}, {21, 17, 18, 22}, {49, 9, 33, 25}, {35, 11, 49, 27}, {19, 54, 35, 43}, {24, 20, 19, 23}, {24, 48, 40, 56}, {38, 46, 22, 55}, {14, 52, 30, 38}, {16, 40, 32, 52}, {48, 60, 8, 32}, {30, 6, 58, 46}, {2, 4, 8, 6}, {2, 26, 42, 58}, {42, 34, 53, 18}, {60, 44, 28, 4}, {20, 54, 36, 44}, {36, 12, 50, 28}, {50, 10, 34, 26}, {12, 11, 9, 10}, {24, 20, 44, 60, 48}, {32, 8, 6, 30, 52}, {4, 28, 50, 26, 2}, {58, 42, 18, 22, 46}, {54, 35, 11, 12, 36}, {10, 9, 33, 53, 34}, {27, 3, 1, 25, 49}, {19, 23, 47, 59, 43}, {17, 21, 45, 57, 41}, {56, 39, 15, 16, 40}, {14, 13, 37, 55, 38}, {31, 51, 29, 5, 7}}

--Catalan Solids
triakisTetrahedronPoints = {{5/3, 5/3, 5/3}, {5/3, -5/3, -5/3}, {-5/3, 5/3, -5/3}, {-5/3, -5/3, 5/3}, {-1, 1, 1}, {1, -1, 1}, {1, 1, -1}, {-1, -1, -1}}
for i, point in pairs(triakisTetrahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / (2 * root2)
	end
end
triakisTetrahedronFaces = {{2, 8, 3}, {2, 8, 4}, {3, 8, 4}, {1, 7, 2}, {2, 7, 3}, {1, 7, 3}, {1, 5, 3}, {3, 5, 4}, {1, 5, 4}, {1, 6, 4}, {4, 6, 2}, {1, 6, 2}}

triakisOctahedronPoints = {{1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1}, {root2m1, root2m1, root2m1}, {root2m1, root2m1, -root2m1}, {root2m1, -root2m1, root2m1}, {root2m1, -root2m1, -root2m1}, {-root2m1, root2m1, root2m1}, {-root2m1, root2m1, -root2m1}, {-root2m1, -root2m1, root2m1}, {-root2m1, -root2m1, -root2m1}}
for i, point in pairs(triakisOctahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / (root2)
	end
end
triakisOctahedronFaces = {{1, 6, 10}, {1, 10, 4}, {6, 10, 4}, {6, 14, 4}, {4, 14, 2}, {2, 14, 6}, {4, 13, 2}, {5, 13, 2}, {5, 13, 4}, {1, 9, 4}, {5, 9, 4}, {1, 9, 5}, {3, 8, 6}, {6, 8, 1}, {3, 8, 1}, {3, 12, 6}, {6, 12, 2}, {3, 12, 2}, {3, 11, 2}, {2, 11, 5}, {3, 11, 5}, {3, 7, 5}, {1, 7, 5}, {1, 7, 3}}

tetrakisHexahedronPoints = {{1, 1, 1}, {1, 1, -1}, {1, -1, 1}, {1, -1, -1}, {-1, 1, 1}, {-1, 1, -1}, {-1, -1, 1}, {-1, -1, -1}, {3/2, 0, 0}, {-3/2, 0, 0}, {0, 3/2, 0}, {0, -3/2, 0}, {0, 0, 3/2}, {0, 0, -3/2}}
for i, point in pairs(tetrakisHexahedronPoints) do
	for j = 1, 3 do
		point[j] = 2 * point[j] / 3
	end
end
tetrakisHexahedronFaces = {{14, 4, 8}, {4, 8 ,12}, {14, 4, 2}, {4, 2, 9}, {14, 2, 6}, {2, 6, 11}, {14, 6, 8}, {8, 6, 10}, {9, 4, 3}, {4, 3, 12}, {9, 1, 3}, {1, 3, 13}, {1, 2, 9}, {1, 2, 11}, {13, 3, 7}, {3, 7, 12}, {13, 1, 5}, {1, 5, 11}, {13, 7, 5}, {7, 5, 10}, {10, 7, 8}, {7, 8, 12}, {10, 5, 6}, {5, 6, 11}}

rhombicDodecahedronPoints = {{1, 1, 1}, {-1, 1, 1}, {1, -1, 1}, {-1, -1, 1}, {1, 1, -1}, {-1, 1, -1}, {1, -1, -1}, {-1, -1, -1}, {2, 0, 0}, {-2, 0, 0}, {0, 2, 0}, {0, -2, 0}, {0, 0, 2}, {0, 0, -2}}
for i, point in pairs(rhombicDodecahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / math.sqrt(3)
	end
end
rhombicDodecahedronFaces = {{9, 1, 13, 3}, {9, 3, 12, 7}, {9, 7, 14, 5}, {9, 5, 11, 1}, {11, 5, 14, 6}, {11, 6, 10, 2}, {11, 2, 13, 1}, {10, 6, 14, 8}, {10, 8, 12, 4}, {10, 4, 13, 2}, {12, 7, 14, 8},  {12, 4, 13, 3}}

rhombicTriacontahedronPoints = {{0, 1, phi}, {0, 1, -phi}, {0, -1, phi}, {0, -1, -phi}, {phi, 0, 1}, {phi, 0, -1}, {-phi, 0, 1}, {-phi, 0, -1}, {1, phi, 0}, {1, -phi, 0}, {-1, phi, 0}, {-1, -phi, 0}, {1, 1, 1}, {1, 1, -1}, {1, -1, 1}, {1, -1, -1}, {-1, 1, 1}, {-1, 1, -1}, {-1, -1, 1}, {-1, -1, -1}, {phi, iphi, 0}, {phi, -iphi, 0}, {-phi, iphi, 0}, {-phi, -iphi, 0}, {0, phi, iphi}, {0, phi, -iphi}, {0, -phi, iphi}, {0, -phi, -iphi}, {iphi, 0, phi}, {iphi, 0, -phi}, {-iphi, 0, phi}, {-iphi, 0, -phi}}
for i, point in pairs(rhombicTriacontahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
rhombicTriacontahedronFaces = {{4, 30, 2, 32}, {4, 16, 6, 30}, {4, 16, 10, 28}, {4, 28, 12, 20}, {4, 20, 8, 32}, {2, 30, 6, 14}, {2, 14, 9, 26}, {2, 26, 11, 18}, {2, 18, 8, 32}, {8, 20, 12, 24}, {8, 24, 7, 23}, {8, 23, 11, 18}, {7, 23, 11, 17}, {7, 17, 1, 31}, {7, 31, 3, 19}, {7, 19, 12, 24}, {12, 28, 10, 27}, {12, 27, 3, 19}, {9, 26, 11, 25}, {1, 17, 11, 25}, {1, 25, 9, 13}, {1, 13, 5, 29}, {1, 29, 3, 31}, {3, 29, 5, 15}, {3, 15, 10, 27}, {9, 21, 5, 13}, {9, 14, 6, 21}, {21, 6, 22, 5}, {10, 16, 6, 22}, {10, 22, 5, 15}}

deltoidalIcositetrahedronPoints = {{1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1}, {0, hroot2, hroot2}, {0, hroot2, -hroot2}, {0, -hroot2, hroot2}, {0, -hroot2, -hroot2}, {hroot2, 0, hroot2}, {hroot2, 0, -hroot2}, {-hroot2, 0, hroot2}, {-hroot2, 0, -hroot2}, {hroot2, hroot2, 0}, {hroot2, -hroot2, 0}, {-hroot2, hroot2, 0}, {-hroot2, -hroot2, 0}, {root2t2p1o7, root2t2p1o7, root2t2p1o7}, {root2t2p1o7, root2t2p1o7, -root2t2p1o7}, {root2t2p1o7, -root2t2p1o7, root2t2p1o7}, {root2t2p1o7, -root2t2p1o7, -root2t2p1o7}, {-root2t2p1o7, root2t2p1o7, root2t2p1o7}, {-root2t2p1o7, root2t2p1o7, -root2t2p1o7}, {-root2t2p1o7, -root2t2p1o7, root2t2p1o7}, {-root2t2p1o7, -root2t2p1o7, -root2t2p1o7}}
for i, point in pairs(deltoidalIcositetrahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / math.sqrt(2 - root2)
	end
end
deltoidalIcositetrahedronFaces = {{1, 16, 21, 11}, {1, 11, 19, 15}, {1, 15, 20, 12}, {1, 12, 22, 16}, {5, 11, 21, 9}, {5, 9, 25, 13}, {5, 13, 23, 7}, {5, 7, 19, 11}, {4, 9, 21, 16}, {4, 16, 22, 10}, {4, 10, 26, 18}, {4, 18, 25, 9}, {3, 15, 20, 8}, {3, 8, 24, 17}, {3, 17, 23, 7}, {3, 7, 19, 15}, {2, 18, 25, 13}, {2, 13, 23, 17}, {2, 17, 24, 14}, {2, 14, 26, 18}, {6, 10, 26, 14}, {6, 14, 24, 8}, {6, 8, 20, 12}, {6, 12, 22, 10}}

pentagonalIcositetrahedronPoints = {{1, tri2p1, triSq}, {1, -tri2p1, -triSq}, {-1, tri2p1, -triSq}, {-1, -tri2p1, triSq}, {triSq, 1, tri2p1}, {triSq, -1, -tri2p1}, {-triSq, 1, -tri2p1}, {-triSq, -1, tri2p1}, {tri2p1, triSq, 1}, {tri2p1, -triSq, -1}, {-tri2p1, triSq, -1}, {-tri2p1, -triSq, 1}, {-1, -triSq, -tri2p1}, {-1, triSq, tri2p1}, {1, -triSq, tri2p1}, {1, triSq, -tri2p1}, {-tri2p1, -1, -triSq}, {-tri2p1, 1, triSq}, {tri2p1, -1, triSq}, {tri2p1, 1, -triSq}, {-triSq, -tri2p1, -1}, {-triSq, tri2p1, 1}, {triSq, -tri2p1, 1}, {triSq, tri2p1, -1}, {triCb, 0, 0}, {-triCb, 0, 0}, {0, triCb, 0}, {0, -triCb, 0}, {0, 0, triCb}, {0, 0, -triCb}, {triSq, triSq, triSq}, {triSq, triSq, -triSq}, {triSq, -triSq, triSq}, {triSq, -triSq, -triSq}, {-triSq, triSq, triSq}, {-triSq, triSq, -triSq}, {-triSq, -triSq, triSq}, {-triSq, -triSq, -triSq}}
for i, point in pairs(pentagonalIcositetrahedronPoints) do
	for j = 1, 3 do
		point[j] = point[j] / 2
	end
end
pentagonalIcositetrahedronFaces = {{30, 13, 38, 17, 7}, {30, 7, 36, 3, 16}, {30, 16, 32, 20, 6}, {30, 6, 34, 2, 13}, {17, 7, 36, 11, 26}, {17, 26, 12, 21, 38}, {13, 38, 21, 28, 2}, {11, 36, 3, 27, 22}, {11, 22, 35, 18, 26}, {26, 18, 8, 37, 12}, {4, 37, 12, 21, 28}, {4, 37, 8, 29, 15}, {29, 8, 18, 35, 14}, {1, 14, 35, 22, 27}, {1, 14, 29, 5, 31}, {5, 29, 15, 33, 19}, {23, 33, 15, 4, 28}, {27, 1, 31, 9, 24}, {9, 31, 5, 19, 25}, {25, 10, 23, 33, 19}, {28, 2, 34, 10, 23}, {3, 16, 32, 24, 27}, {20, 25, 9, 24, 32}, {25, 20, 6, 34, 10}}


--Point-Face Interpreter
scl = obj.track0
size = obj.track1
half = size / 2
line = obj.track2
if debugMode == 1 then
	local tris = 0
	local quads = 0
	local pents = 0
	local hexes = 0
	obj.setfont("Consolas", 20, 3)
	for i, point in pairs(points) do
		obj.setoption("billboard", 1)
		obj.load("text", i)
		obj.draw(point[1] * scl, point[2] * scl, point[3] * scl)
	end
	for i, face in pairs(faces) do
		local len = #face
		if len == 3 then
			tris = tris + 1
		elseif len == 4 then
			quads = quads + 1
		elseif len == 5 then
			pents = pents + 1
		elseif len == 6 then
			hexes = hexes + 1
		end
	end
	debug_print(string.format("Point: %d", #points))
	debug_print(string.format("Faces: %d", #faces))
	debug_print(string.format("Tris: %d\nQuads: %d\nPents: %d\nHexes: %d", tris, quads, pents, hexes))
end
obj.setoption("billboard", 0)
alpha = obj.track3 / 100
for i, face in pairs(faces) do
	local p1 = points[face[1]]
	local p2 = points[face[2]]
	local p3 = points[face[3]]
	local p4 = points[face[4]]
	local p5 = points[face[5]]
	local p6 = points[face[6]]
	obj.load("figure", "Triangle", (sepCol ~= 1) and col or triCol, size, line)
	if p4 == nil then
		local uv = {}
		for i = 0, 2 do
			uv[i+1] = {half + 0.95 * half * math.sin(2 * math.pi * i / 3), half - 0.95 * half * math.cos(2 * math.pi * i / 3)}
		end
		obj.drawpoly(
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		p2[1] * scl, p2[2] * scl, p2[3] * scl,
		p3[1] * scl, p3[2] * scl, p3[3] * scl,
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		uv[1][1], uv[1][2],
		uv[2][1], uv[2][2],
		uv[3][1], uv[3][2],
		uv[1][1], uv[1][2],
		alpha)
	elseif p5 == nil then
		obj.load("figure", "Square", (sepCol ~= 1) and col or sqrCol, size, line)
		obj.drawpoly(
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		p2[1] * scl, p2[2] * scl, p2[3] * scl,
		p3[1] * scl, p3[2] * scl, p3[3] * scl,
		p4[1] * scl, p4[2] * scl, p4[3] * scl,
		0.05 * size, 0.05 * size,
		0.95 * size, 0.05 * size,
		0.95 * size, 0.95 * size,
		0.05 * size, 0.95 * size,
		alpha)
	elseif p6 == nil then
		obj.load("figure", "Pentagon", (sepCol ~= 1) and col or penCol, size, line)
		local uv = {}
		for i = 0, 4 do
			uv[i+1] = {half + 0.95 * half * math.sin(2 * math.pi * i / 5), half - 0.95 * half * math.cos(2 * math.pi * i / 5)}
		end
		obj.drawpoly(
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		p2[1] * scl, p2[2] * scl, p2[3] * scl,
		p3[1] * scl, p3[2] * scl, p3[3] * scl,
		p4[1] * scl, p4[2] * scl, p4[3] * scl,
		uv[2][1], uv[2][2],
		uv[3][1], uv[3][2],
		uv[4][1], uv[4][2],
		uv[5][1], uv[5][2],
		alpha)
		obj.drawpoly(
		p4[1] * scl, p4[2] * scl, p4[3] * scl,
		p5[1] * scl, p5[2] * scl, p5[3] * scl,
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		p4[1] * scl, p4[2] * scl, p4[3] * scl,
		uv[5][1], uv[5][2],
		uv[1][1], uv[1][2],
		uv[2][1], uv[2][2],
		uv[5][1], uv[5][2],
		alpha)
	else
		obj.load("figure", "Hexagon", col, size, line)
		local uv = {}
		for i = 0, 5 do
			uv[i+1] = {half + 0.95 * half * math.sin(2 * math.pi * i / 6), half - 0.95 * half * math.cos(2 * math.pi * i / 6)}
		end
		obj.drawpoly(
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		p2[1] * scl, p2[2] * scl, p2[3] * scl,
		p3[1] * scl, p3[2] * scl, p3[3] * scl,
		p4[1] * scl, p4[2] * scl, p4[3] * scl,
		uv[1][1], uv[1][2],
		uv[2][1], uv[2][2],
		uv[3][1], uv[3][2],
		uv[4][1], uv[4][2],
		alpha)
		obj.drawpoly(
		p4[1] * scl, p4[2] * scl, p4[3] * scl,
		p5[1] * scl, p5[2] * scl, p5[3] * scl,
		p6[1] * scl, p6[2] * scl, p6[3] * scl,
		p1[1] * scl, p1[2] * scl, p1[3] * scl,
		uv[4][1], uv[4][2],
		uv[5][1], uv[5][2],
		uv[6][1], uv[6][2],
		uv[1][1], uv[1][2],
		alpha)
	end
end
