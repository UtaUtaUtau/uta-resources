@Spectrogram
--track0:Width,0,4096,640
--track1:Height,0,2304,480
--track2:Stroke Weight,0,100,1
--track3:Volume,0,500,100
--Dialog:Color/col,col=0xffffff;Mode [1 - 3],mode=1;Mode 2 Limit,lim=512;Quality,qual=1024;Mirror/chk,mirror=0;Smoothing[0-100],amt=75;
function lerp(a, b, t)
    return a * (1 - t) + b * t
end

function polyLine(x1, y1, x2, y2, w, col)
    obj.load("figure", "Circle", col, w, w)
    obj.draw(x1, y1)
    obj.draw(x2, y2)
    obj.load("figure", "Square", col)
    local t = math.atan2(y1 - y2, x1 - x2)
    local off = {
        x1 = w/2 * math.cos(t-math.pi/2),
        x2 = w/2 * math.cos(t+math.pi/2),
        y1 = w/2 * math.sin(t-math.pi/2),
        y2 = w/2 * math.sin(t+math.pi/2)
    }
    obj.drawpoly(x1+off.x1, y1+off.y1, 0, x2+off.x1, y2+off.y1, 0, x2+off.x2, y2+off.y2, 0, x1+off.x2, y1+off.y2, 0)
end
w = obj.track0
h = obj.track1
vol = obj.track3 / 100
modes = {"spectrum", "fourier", "pcm"}

if audioBuffer == nil then
    audioBuffer = {}
end
if audioBuffer[obj.layer] == nil then
    audioBuffer[obj.layer] = {}
    n = obj.getaudio(audioBuffer[obj.layer], "audiobuffer", modes[((mode-1) % 3) + 1], qual)
else
    if mode ~= 3 then
        currBuffer = {}
        n = obj.getaudio(currBuffer, "audiobuffer", modes[((mode-1) % 3) + 1], qual)
        for i = 1, n do
            audioBuffer[obj.layer][i] = lerp(currBuffer[i], audioBuffer[obj.layer][i], amt / 100)
        end
    else
        n = obj.getaudio(audioBuffer[obj.layer], "audiobuffer", modes[((mode-1) % 3) + 1], qual)
    end
end

if obj.frame == 0 then
    n = obj.getaudio(audioBuffer[obj.layer], "audiobuffer", modes[((mode-1) % 3) + 1], qual)
end

div = 0
skip = 1
yOff = h/2

if mirror == 1 and mode ~= 3 then
   yOff = 0
   h = h/2 
end

if mode > 1 then
    if mode == 2 then
        skip = math.floor(n / qual)
        n = lim
    end
    div = 2^15
else
    div = 2^14
end

obj.setoption("dst", "tmp", w, (mirror == 1) and h*2 or h)
for i = 0, n - 2, skip do
    local val1 = audioBuffer[obj.layer][i + 1]
    local val2 = audioBuffer[obj.layer][i + skip + 1]
    local line = {
        x1 = (w / (n - 1)) * i - w/2,
        y1 = -h * (val1 * vol) / div + yOff,
        x2 = (w / (n - 1)) * (i + skip) - w/2,
        y2 = -h * (val2 * vol) / div + yOff
    }
    if mode == 3 then
        polyLine(line.x1, line.y1 - h/2, line.x2, line.y2 - h/2, obj.track2, col)
    elseif mirror == 1 and mode ~= 3 then
        polyLine(line.x1, line.y1, line.x2, line.y2, obj.track2, col)
        polyLine(line.x1, -line.y1, line.x2, -line.y2, obj.track2, col)
    else
        polyLine(line.x1, line.y1, line.x2, line.y2, obj.track2, col)
    end
end
obj.load("tempbuffer")



@Particle Pop
--track0:Progress,0,100,0
--track1:Particles,0,64,16,1
--track2:Size,0,4096,32
--track3:Height,0,4096,64
--Dialog:Figure/fig,fig="Circle";Color/col,col=0xffffff;Drift Range,range=32;Easing,ease=2;Seed,seed=0;

function logbx(b, x)
    return math.log(x) / math.log(b)
end

num = obj.track1
amt = obj.track0 / 100
size = {}
height = {}
drift = {}

for i = 1, num do
   size[i] = obj.rand(0, 1, seed, i)
   height[i] = obj.rand(0, obj.track3, seed, 2*i + 2)
   drift[i] = obj.rand(-range, range, seed, 3*i + 4) 
end

obj.setoption("dst", "tmp", obj.track2*2 + range*2, obj.track2 + obj.track3*2)

for i = 1, num do
    s = obj.track2 * (1 - amt)
    obj.load("figure", fig, col, s, s)
    obj.draw(drift[i] * logbx(ease, amt*(ease - 1) + 1), -height[i] * amt)
end

obj.load("tempbuffer")

@Point Sphere
--track0:Samples, 4, 1024, 1024
--track1:Radius, 0, 1024, 128
--track2:Point Size, 0, 64, 4
--track3:React Height, 0, 1024, 512
--Dialog:Figure/fig,fig="Circle";Color/col,col=0xffffff;Text/chk,txt=0;Font,font="Segoe UI";Character,char="+";Audio Reactive/chk,react=0;Multiplier,mult=phi;Rotation Speed,rot=0;Rainbow/chk,bow=0;

phi = 2 / (1 + math.sqrt(5))
pi = math.pi

function stringSplit(str)
    local t = {}
    local n = 1
    while (n <= #str) do
       local c = str:byte(n)
       if c > 127 then
          table.insert(t, str:sub(n, n + 1))
          n = n + 1
       else
          table.insert(t, str:sub(n, n))
       end
       n = n + 1
    end
    return t
end

function map(x, l, h, nl, nh)
    local amt = (x - l) / (h - l)
    return nl * (1 - amt) + nh * amt
end

function pointSphere(samp, mul, pha, rot)
    if mul == nil then mul = 2 / (1 + math.sqrt(5)) end
    local points = {}
    local off = 2 / samp
    local inc = 2 * math.pi * mul

    for i = 0, samp-1 do
        local p = {}
        p.y = ((i * off) - 1) + off/2
        local r = math.sqrt(1 - p.y*p.y)

        local phi = (i % samp) * inc + (obj.frame * math.rad(rot))

        p.x = r * math.cos(phi)
        p.z = r * math.sin(phi)

        table.insert(points, p)
    end

    return points
end

r = obj.track1

buf = {}
points = pointSphere(obj.track0, mult, pha, rot)

if react == 1 then
    obj.getaudio(buf, "audiobuffer", "spectrum", obj.track0)
end

obj.setfont(font, obj.track2, 0, col, col)

for i = 1, #points do
    if txt == 1 then
	charTable = stringSplit(char)
        if #charTable == 1 then
            obj.load("text", charTable[1])
        elseif #charTable > 1 then
            obj.load("text", charTable[(i % #charTable) + 1])
        else
            obj.load("figure", fig, col, obj.track2, obj.track2)
        end
    else
        obj.load("figure", fig, col, obj.track2, obj.track2)
    end
    if bow == 1 then
        obj.effect("Color compensation", "Hue", map(i, 1, #points, 0, 360)) 
    end
    if react == 1 then
        r = obj.track1 + ((buf[i] / (2^14)) * obj.track3)
    end
    obj.draw(r * points[i].x, r * points[i].y, r * points[i].z)
end

@Text + Font Change by Char
--track0:Size,0,1024,34
--track1:Spacing,0,10000,100
--track2:Interval(s),0,10,0.02
--track3:Mode,0,4,4,1
--Dialog:Text,str="�e�X�g�e�L�X�g";Fonts,fonts={"MS UI Gothic"};Text Color/col,tCol=0xffffff;Border Color/col,bCol=0x000000;Type[0-4/r],type=r;Merge/chk,merge=1;Alignment[0-2],align=1;Seed,seed=0;
function stringSplit(str)
    local t = {}
    local n = 1
    while (n <= #str) do
       local c = str:byte(n)
       if c > 127 then
          table.insert(t, str:sub(n, n + 1))
          n = n + 1
       else
          table.insert(t, str:sub(n, n))
       end
       n = n + 1
    end
    return t
end
r = "random"
size = obj.track0
kern = size * obj.track1/100
itvl = (obj.track2 == 0) and 1/obj.framerate or obj.track2
randFrame = math.floor(obj.time/itvl)
strTable = stringSplit(str)
modes = obj.track3
if merge == 1 then
    obj.setoption("dst", "tmp", obj.screen_w, obj.screen_h)
end

for k, v in pairs(strTable) do
    local idx = 1
    if modes == 0 then
        idx = (k % #fonts) + 1
    elseif modes == 1 then
        idx = #fonts - (k % #fonts)
    elseif modes == 2 then
        idx = obj.rand(1, #fonts, seed + k, randFrame)
    end
    
    local multAlign = k - 1
    if align == 1 then
        multAlign = multAlign - #strTable/2
    elseif align == 2 then
        multAlign = multAlign - #strTable + 1
    end
    local font = fonts[idx]
    local mode = type
    if mode == r then
        mode = obj.rand(0, 4, seed + 2*k + 1, randFrame)
    end
    obj.setfont(font, size, mode, tCol, bCol)
    obj.load("text", v)
    obj.draw(kern * multAlign)
end

if merge == 1 then
    obj.load("tempbuffer")
end

@Image Sequence
--Dialog:File Location,loc="";File Name,name="";Frames,frameTab={0,10};File Extension,ext="png";Framerate,framerate=60;Offset,off=0;
frametime = math.floor(obj.time * framerate) + off
frame = 0
if #frameTab == 2 then
	frame = frametime % (frameTab[2] - frameTab[1] + 1) + frameTab[1]
elseif #frameTab > 2 then
	frame = frameTab[frametime % #frameTab + 1]
end
nameFrame = string.format(name, frame)
file = string.format("%s%s.%s", loc, nameFrame, ext)
obj.load("image", file)

@Chaotic Attractor (Derivative)
--track0:Size,0,1024,8
--track1:Scale,0,1024,100
--track2:Spread,1,1000,1
--Dialog:Figure/fig,fig="Circle";Color/col,col=0xffffff;Variables,var=lorenzIn;Function,func=lorenz;Time Step,dt=0.01;Particle Amount,parts=1;Origin,origin={1,1,1};Seed,seed=0;
require("vector")
scl = obj.track1
spread = obj.track2
lorenzIn = {s=10,r=28,b=8/3}
function lorenz(v, x)
	local px = v.s * (x.y - x.x)
	local py = x.x * (v.r - x.z) - x.y
	local pz = x.x * x.y - v.b * x.z
	return createVector(px, py, pz)
end

aizawaIn = {a=0.95,b=0.7,c=0.6,d=3.5,e=0.25,f=0.1}
function aizawa(v, p)
	local px = (p.z - v.b) * p.x - v.d * p.y
	local py = v.d * p.x + (p.z - v.b) * p.y
	local pz = v.c + v.a * p.z - math.pow(p.z, 3) / 3 - (p.x * p.x + p.y * p.y) * (1 + v.e * p.z) + v.f * p.z * math.pow(p.x, 3)
	return createVector(px, py, pz) 
end

halvorsenIn = 1.4
function halvorsen(v, p)
	local px = -v * p.x - 4 * p.y - 4 * p.z - p.y * p.y
	local py = -v * p.y - 4 * p.z - 4 * p.x - p.z * p.z
	local pz = -v * p.z - 4 * p.x - 4 * p.y - p.x * p.x
	return createVector(px, py, pz)
end

function rungeKutta(f, x, h)
	local k1 = f(var, x) * h
	local k2 = f(var, x + k1 / 2) * h
	local k3 = f(var, x + k2 / 2) * h
	local k4 = f(var, x + k3) * h
	
	return x + (k1 + k2 * 2 + k3 * 2 + k4) / 6
end

if obj.frame == 0 then
	attractorData = {}
	attractorData[obj.layer] = {}
	for i = 1, parts do
		local particle = createVector(origin[0], origin[1], origin[2])
		local off = createVector(obj.rand(-1024, 1024, seed + i, 1), obj.rand(-1024, 1024, seed + i, 2), obj.rand(-1024, 1024, seed + i, 3)) / 1024
		off = off * spread / scl
		particle = particle + off
		table.insert(attractorData[obj.layer], deepcopy(particle))
	end
end

obj.setoption("billboard", 1)
obj.load("figure", fig, col, obj.track0)
for i, p in pairs(attractorData[obj.layer]) do
	obj.draw(p.x * scl, p.y * scl, p.z * scl)
	local np = rungeKutta(func, p, dt)
	attractorData[obj.layer][i] = deepcopy(np)
end

@Image Sequence (Manual Animate)
--track0:Progress,0,100,0
--Dialog:File Location,loc="";File Name,name="";Frames,frameTab={0,10};File Extension,ext="png";
function round(x)
	num, dec = math.modf(x)
	if dec < 0.5 then
		return num
	else
		return num + 1
	end
end

amt = obj.track0 / 100
frames = {}
if #frameTab == 2 then
	for i = frameTab[1], frameTab[2], 1 do
		table.insert(frames, i)
	end
else
	frames = frameTab
end
frameIdx = round(amt * (#frames - 1)) + 1
frame = frames[frameIdx] 
nameFrame = string.format(name, frame)
file = string.format("%s%s.%s", loc, nameFrame, ext)
obj.load("image", file)

@Trail
--track0:Size,0,2048,30
--Dialog:Figure/fig,fig="Circle";Color/col,col=0xffffff;Trail Length,length=0.333333;Quality,qual=40;Scale/chk,scale=1;Fade/chk,fade=0;osu! style/chk,osu=0;Bounce/chk,bounce=0;Length Limit,limit=0;
function hypot(...)
	local res = 0
	for i, v in ipairs(arg) do
		res = res + v * v
	end
	return math.sqrt(res)
end

function tri(x,a) return math.abs(((x - a) % (4 * a)) - 2 * a) - a end

function lerp(a, b, t) return (b - a) * t + a end

function clamp(x)
	if x > 1 then return 1 end
	if x < 0 then return 0 end
	return x
end

function lut()
	local endTime = obj.time
	local startTime = endTime - length
	if startTime < 0 then startTime = 0 end
	local px = obj.getvalue("x", startTime)
	local py = obj.getvalue("y", startTime)
	local pz = obj.getvalue("z", startTime)
	local lengths = {0}
	for i = 1, qual do
		local ti = (endTime - startTime) * (i - 1) / (qual - 1) + startTime
		local x = obj.getvalue("x", ti < 0 and 0 or ti)
		local y = obj.getvalue("y", ti < 0 and 0 or ti)
		local z = obj.getvalue("z", ti < 0 and 0 or ti)
		local l = lengths[#lengths] + hypot(x - px, y - py, z - pz)
		table.insert(lengths, l)
		px = x
		py = y
		pz = z
	end
	return lengths
end

function parameterize(t, lengths)
	local endTime = obj.time
	local startTime = endTime - length
	if startTime < 0 then startTime = 0 end
	local sumlen = lengths[#lengths]
	local tlen = sumlen * t
	if limit > 0 then tlen = lerp(math.max(0, sumlen - limit), sumlen, t) end
	local low = 1
	local high = #lengths
	local idx = 1
	
	while low < high do
		idx = low + math.floor((high - low) / 2)
		if lengths[idx] < tlen then
			low = idx + 1
		else
			high = idx
		end
	end
	if lengths[idx] > tlen then idx = idx - 1 end
	
	local pl = lengths[idx]
	if pl == target then
		return lerp(startTime, endTime, idx / #lengths)
	else
		return lerp(startTime, endTime, (idx + (tlen - pl) / (lengths[idx+1] - pl)) / #lengths)
	end
end

currTime = obj.time
lengths = lut()
if osu == 0 then
	obj.load("figure", fig, col, obj.track0)
	for i = 1, qual do
		local amt = 1 - (i - 1) / (qual - 1)
		local t = currTime - length * (1 - amt)
		if t < 0 then break end
		local x = obj.getvalue("x", t)
		local y = obj.getvalue("y", t)
		local z = obj.getvalue("z", t)
		local zoom = obj.getvalue("zoom", t) / 100
		local alpha = obj.getvalue("alpha", t)
		local rz = obj.getvalue("rz", t)
		obj.zoom = scale == 1 and zoom * amt or zoom
		obj.alpha = fade == 1 and alpha * amt or alpha
		obj.rz = rz
		if bounce == 0 then
			obj.draw(x - obj.x, y - obj.y, z - obj.z)
		else
			obj.draw(tri(x, obj.screen_w / 2) - obj.x, tri(y, obj.screen_h / 2) - obj.y, z - obj.z)
		end
	end
else
	obj.load("figure", fig, col, obj.track0)
	obj.setoption("blend", 0)
	obj.effect("Blur", "Range", obj.track0 / 4)
	if bounce == 0 then
		obj.draw()
	else
		obj.draw(tri(obj.x, obj.screen_w / 2) - obj.x, tri(obj.y, obj.screen_h / 2) - obj.y, obj.z - obj.z)
	end
	obj.setoption("blend", 1)
	obj.effect("Blur", "Range", 3 * obj.track0 / 4)
	for i = 1, qual do
		local amt = (i - 1) / (qual - 1)
		local t = parameterize(amt, lengths)
		local x = obj.getvalue("x", t)
		local y = obj.getvalue("y", t)
		local z = obj.getvalue("z", t)
		local zoom = obj.getvalue("zoom", t) / 100
		local alpha = obj.getvalue("alpha", t)
		local rz = obj.getvalue("rz", t)
		obj.zoom = zoom
		obj.alpha = (alpha * amt)
		if limit > 0 then
			obj.alpha = obj.alpha * clamp(lengths[#lengths] / limit)
		else
			obj.alpha = obj.alpha * clamp(currTime / length)
		end
		obj.rz = rz
		if bounce == 0 then
			obj.draw(x - obj.x, y - obj.y, z - obj.z)
		else
			obj.draw(tri(x, obj.screen_w / 2) - obj.x, tri(y, obj.screen_h / 2) - obj.y, z - obj.z)
		end
	end
	obj.zoom = 2.5
	obj.alpha = 1
	if bounce == 0 then
		obj.draw()
	else
		obj.draw(tri(obj.x, obj.screen_w / 2) - obj.x, tri(obj.y, obj.screen_h / 2) - obj.y, obj.z - obj.z)
	end
end

