@TA-Audio Reactive
--track0:Volume,0,100,100
--track1:Mode,1,3,2,1
--track2:Curve Center,0,100,50
--track3:Curve Strength,0,5,1
--Dialog:X,xoff=0;Y,yoff=-128;Z,zoff=0;RotX,rx=0;RotY,ry=0;RotZ,rz=0;Zoom,zoom=0;Smoothing[0-100],smooth=75;Glow?/chk,glow=0;Diffusion,diff={30,75};Fourier Offset (Mode1),foff=0;Fourier Scale (Mode1),fscl=1;
function interp(a, b, amt)
	return a * (1 - amt) + b * amt
end
function ease(x, e, off)
    local offp = 1 - off
    local xp = 1 - x
    if x < off then
        return off * math.pow(x / off, e)
    else
        return 1 - offp * math.pow(xp / offp, e)
    end
end

i = obj.index
vol = obj.track0 / 100 
amt = 0
modes = {"fourier", "spectrum", "pcm"}
mode = modes[obj.track1]
if TAaudioBuffer == nil then
	TAaudioBuffer = {}
end
if TAaudioBuffer[obj.layer] == nil then
	TAaudioBuffer[obj.layer] = {}
	obj.getaudio(TAaudioBuffer[obj.layer], "audiobuffer", mode, obj.num)
else	
	if mode ~= "pcm" then
        currBuffer = {}
        obj.getaudio(currBuffer, "audiobuffer", mode, obj.num)
        for i = 1, obj.num do
            TAaudioBuffer[obj.layer][i] = interp(currBuffer[i], TAaudioBuffer[obj.layer][i], smooth / 100)
        end
    else
        obj.getaudio(TAaudioBuffer[obj.layer], "audiobuffer", mode, obj.num)
    end
end

if obj.frame == 0 then
    obj.getaudio(TAaudioBuffer[obj.layer], "audiobuffer", mode, obj.num)
end

e = obj.track3
off = obj.track2 / 100

if mode == "spectrum" then
	amt = TAaudioBuffer[obj.layer][i + 1] / 16384
elseif mode == "fourier" then
	i = (math.floor(i * (fscl*1024 / obj.num)) + foff) % 1024
	amt = TAaudioBuffer[obj.layer][i + 1] / 32768
elseif mode == "pcm" then
	amt = ((TAaudioBuffer[obj.layer][i + 1] / 32768) + 1) / 2
end

if e == 0 then
	amt = (amt > off) and 1 or 0
else
	amt = ease(amt, e, off)
end

obj.ox = obj.ox + interp(0, xoff*vol, amt)
obj.oy = obj.oy + interp(0, yoff*vol, amt)
obj.oz = obj.oz + interp(0, zoff*vol, amt)
obj.rx = obj.rx + interp(0, rx*vol, amt)
obj.ry = obj.ry + interp(0, ry*vol, amt)
obj.rz = obj.rz + interp(0, rz*vol, amt)
obj.zoom = obj.zoom + interp(0, (zoom*vol/100), amt)

if glow == 1 then
	obj.effect("Glow", "Diffusion", interp(diff[1], diff[2], amt))
end

@TA-Polar Text
--track0:Linear to Polar,0,100,100
--track1:Radius,0,1000,100
--track2:Rotation,-2160,2160,0
--track3:Shift,0,100,0
--Dialog:Rotate Text/chk,tRot=1;Resize from Shift/chk,zoom=1;Fade from Shift/chk,fade=0;Rotate Offset,roff=-90;Shift Multiplier,mult=1;
function interp(a, b, amt)
	return a * (1 - amt) + b * amt
end

function map(v, l, h, nl, nh)
	local amt = (v - l) / (h - l)
	return interp(nl, nh, amt)
end

function constrain(v, l, h)
	if (v < l) then
		return l
	elseif (v > h) then
		return h
	else
		return v
	end
end

i = obj.index
n = obj.num

r = obj.track1 - (obj.track1 + mult*i)*(obj.track3/100)
r = constrain(r, 0, obj.track1)
amt = obj.track0 / 100
t = math.rad(i * 360/n)
off = math.rad(obj.track2)

x = r*math.cos(t + off)
y = r*math.sin(-t - off)
rot = math.deg(-off - t) + roff

obj.ox = interp(obj.ox, x, amt)
obj.oy = interp(obj.oy, y, amt)

if (tRot == 1) then
	obj.rz = interp(obj.rz, rot, amt)
end

if (zoom == 1) then
	obj.zoom = map(r, 0, obj.track1, 0, 1)
end

if (fade == 1) then
	obj.alpha = map(r, 0, obj.track1, 0, 1)
end

@TA-Kerning Control
--track0:Kerning,-1000,1000,0
--track1:Center X,-2000,2000,0
--track2:Center Y,-2000,2000,0
--Dialog:Affect X/chk,ctrlX=1;Affect Y/chk,ctrlY=0;
kern = obj.track0/100
xoff = obj.track1
yoff = obj.track2
if (ctrlX == 1) then
	obj.ox = xoff + (obj.ox - xoff) * (1 + kern)
end

if (ctrlY == 1) then
	obj.oy = yoff + (obj.oy - yoff) * (1 + kern)
end

@TA-Scatter
--track0:Progress,0,100,0.001
--track1:Maximum,-1024,1024,128
--track2:Minimum,-1024,1024,-128
--Dialog:Zoom/chk,isZoom=1;Fade/chk,isFade=0;Coord Rotate/chk,isCoordBased=1;Random Range/chk,rand=1;Origin,origin={};Seed,seed=0;
function interp(a, b, amt)
	return a * (1 - amt) + b * amt
end
i = obj.index
amt = obj.track0/100
max = obj.track1
min = obj.track2

ox = obj.ox
oy = obj.oy

if #origin == 2 then
	ox = origin[1]
	oy = origin[2]
end

if (rand == 1) then
	max = obj.rand(obj.track1, obj.track2, (i + 1) * (seed/2) + seed, 1) 
	min = obj.rand(obj.track1, obj.track2, (i + 1) * seed + seed, 1)
end 

if (min >= max) then
	min = -max
end

pos = {x = obj.rand(min, max, i + seed, 0), y = obj.rand(min, max, i + 1 + seed, 0), rot = obj.rand(-360, 360, i + 2, 0)}
obj.ox = interp(ox, obj.ox + pos.x, amt)
obj.oy = interp(oy, obj.oy + pos.y, amt)
if (isCoordBased == 1) then
	pos.rot = math.deg(math.atan2(pos.y, pos.x) + math.pi/2)
	obj.rz = interp(obj.rz, pos.rot, amt)
else
	obj.rz = interp(obj.rz, obj.rz + pos.rot, amt)
end
if (isZoom == 1) then
	obj.zoom = 1 - amt
end
if (isFade == 1) then
	obj.alpha = 1 - amt
end	

@Audio Reactive
--track0:Volume,0,500,100
--track1:Sample Size,1,1024,1024,1
--track2:Smoothing,0,100,0
--Dialog:X,px=0;Y,py=0;Z,pz=0;X-spin,rx=0;Y-spin,ry=0;Z-spin,rz=0;Zoom,zoom=0;Alpha,alpha=0;
function lerp(a, b, t)
	return a * (1 - t) + b * t
end

function rootMeanSquare(t)
	local rms = 0
	for i = 1, #t do
		rms = rms + (t[i] / 32768)^2
	end
	return math.sqrt(rms / #t)
end

vol = obj.track0/100
smooth = obj.track2/100
buf = {}
obj.getaudio(buf, "audiobuffer", "pcm", obj.track1)
if amp == nil then
	amp = {}
	amp[obj.layer] = rootMeanSquare(buf)
else
	if obj.frame ~= 0 then
		amp[obj.layer] = lerp(rootMeanSquare(buf), amp[obj.layer], smooth)
	else
		amp[obj.layer] = rootMeanSquare(buf)
	end
end

cAmp = amp[obj.layer]

obj.ox = obj.ox + px*vol*cAmp
obj.oy = obj.oy + py*vol*cAmp
obj.oz = obj.oz + pz*vol*cAmp
obj.rx = obj.rx + rx*vol*cAmp
obj.ry = obj.ry + ry*vol*cAmp
obj.rz = obj.rz + rz*vol*cAmp
obj.zoom = obj.zoom + (zoom/100)*vol*cAmp
obj.alpha = obj.alpha + (alpha/100)*vol*cAmp

@Glitch
--track0:Range,0,256,8
--track1:Threshold,0,100,50
--track2:Raster Width,0,1000,16
--track3:Color Shift,0,1000,3
--dialog:Raster Height,h=5;Shift Type (0-6),cs=4;Split number,split=8;Horiz/chk,horiz=1;Vert/chk,vert=0;Frame interval,inter=4;
range = obj.track0
thresh = obj.track1/100
w = obj.track2
gapW = obj.track3

i = obj.index
state = horiz + vert
if state ~= 0 then
	if obj.rand(0, 2^16, i, math.floor(obj.frame/inter)) / (2^16) < thresh then
		local disc = (state == 2) and obj.rand(0, 1, i + 8, math.floor(obj.frame/inter)) or vert
		obj.effect("Raster", "Height", h, "Width", w, "Random amplitude", 1, "Vertical raster", disc)
		obj.effect("Color shift", "Angle", 90 * (1 - disc), "Gap width", gapW, "type", cs%7)
		if horiz == 1 then
			obj.ox = obj.ox + obj.rand(-range, range, i + 16, math.floor(obj.frame/inter))
		end
		if vert == 1 then
			obj.oy = obj.oy + obj.rand(-range, range, i + 32, math.floor(obj.frame/inter))
		end
	end
end

@BPM Beat
--track0:Volume,0,500,100
--track1:BPM,0,1024,100
--track2:Mode,0,1,0,1
--track3:Offset,0,1024,0
--Dialog:Acceleration,e=5;X,px=0;Y,py=0;Z,pz=0;X-spin,rx=0;Y-spin,ry=0;Z-spin,rz=0;Zoom,zoom=0;Alpha,alpha=0;
vol = obj.track0/100
off = obj.track3/1024
bps = obj.track1/60

if amp == nil then
	amp = 1
else
	if obj.track2 == 0 then
		amp = (1 - (obj.time*bps + off)%1)^e
	else
		amp = math.abs(math.sin(math.pi*(obj.time*bps) + math.pi/2 + (math.pi/2)*off)^e)
	end
end

obj.ox = obj.ox + px*vol*amp
obj.oy = obj.oy + py*vol*amp
obj.oz = obj.oz + pz*vol*amp
obj.rx = obj.rx + rx*vol*amp
obj.ry = obj.ry + ry*vol*amp
obj.rz = obj.rz + rz*vol*amp
obj.zoom = obj.zoom + (zoom/100)*vol*amp
obj.alpha = obj.alpha + (alpha/100)*vol*amp

@Pinch
--track0:Pinch Strength,-100,100,0
--track1:Aspect,-100,100,0
--Dialog:Quality,q=8;Exponent,exp=2;Root Out/chk,root=1;Antialias/chk,antialias=1;Effect Multiplier,mult = 1
if exp == 0 then exp = 1 end
function lerp(a, b, t)
	return a * (1 - t) + b * t
end
function constrain(x, l, h)
	if x < l then
		return l
	elseif x > h then
		return h
	else
		return x
	end
end
function c01(x)
	return constrain(x, 0, 1)
end
function dist(x1, y1, x2, y2, e)
	local x = math.abs(x1 - x2)
	local y = math.abs(y1 - y2)
	if root == 1 then
		return (x^e + y^e)^(1/e)
	else
		return (x^e + y^e)
	end
end
w, h = obj.getpixel()
xAsp = c01(lerp(2, 0, (obj.track1 + 100) / 200))
yAsp = c01(lerp(0, 2, (obj.track1 + 100) / 200))
t = obj.track0*mult / 100
w2 = w/2
h2 = h/2
q2 = q/2
xi = w/q
yi = h/q
obj.setoption("dst", "tmp", 4096, 2304)
obj.setoption("antialias", antialias)
for x = 0, q - 1 do
	for y = 0, q - 1 do
		local xp = x+1
		local yp = y+1
		local dists = {
			a = dist(x/q, y/q, 0.5, 0.5, exp) + 1,
			b = dist(xp/q, y/q, 0.5, 0.5, exp) + 1,
			c = dist(xp/q, yp/q, 0.5, 0.5, exp) + 1,
			d = dist(x/q, yp/q, 0.5, 0.5, exp) + 1	
		}
		if t < 0 then
			dists.a = lerp(1, dists.a, -t)
			dists.b = lerp(1, dists.b, -t)
			dists.c = lerp(1, dists.c, -t)
			dists.d = lerp(1, dists.d, -t)
		else
			dists.a = lerp(1, 1/dists.a, t)
			dists.b = lerp(1, 1/dists.b, t)
			dists.c = lerp(1, 1/dists.c, t)
			dists.d = lerp(1, 1/dists.d, t)
		end
		local a = {x = (xi * x - w2) * dists.a, y = (yi * y - h2) * dists.a}
		local b = {x = (xi * xp - w2) * dists.b, y = (yi * y - h2) * dists.b}
		local c = {x = (xi * xp - w2) * dists.c, y = (yi * yp - h2) * dists.c}
		local d = {x = (xi * x - w2) * dists.d, y = (yi * yp - h2) * dists.d}
		obj.drawpoly(
			a.x * xAsp, a.y * yAsp, 0,
			b.x * xAsp, b.y * yAsp, 0,
			c.x * xAsp, c.y * yAsp, 0,
			d.x * xAsp, d.y * yAsp, 0,
			xi*x, yi*y,
			xi*xp, yi*y,
			xi*xp, yi*yp,
			xi*x, yi*yp
		)
	end
end
obj.setoption("antialias", 1)
obj.load("tempbuffer")

@Multiple Frame Thing
--track0:Number,1,100,1,1
--Dialog:Object Width,cW=100;Object Height,cH=100;
obj.effect("Image tiling", "Hx#", obj.track0, "Vy#", obj.track0)

if cW == cH then
	obj.zoom = cW / obj.w
elseif cW < cH then
	obj.zoom = cW / obj.w
else
	obj.zoom = cH / obj.h
end

@TA-PositionAdj Init
--track0:Progress,0,100,0
--Dialog:Positions,pos={};
function lerp(a, b, t)
	return a * (1 - t) + b * t
end

if posi == nil then
	posi = {}
end

amt = obj.track0 / 100
obj.setanchor("pos", obj.num, "init")

x = pos[obj.index*2 + 1]
y = pos[obj.index*2 + 2]

obj.ox = lerp(obj.ox, x, amt)
obj.oy = lerp(obj.oy, y, amt)

posi[obj.index + 1] = {obj.ox, obj.oy}

@TA-PositionAdj ReInit

if posi == nil then
	posi = {}
end

posi[obj.index + 1] = {obj.ox, obj.oy}

@TA-PositionAdj Connect
--track0:Progress,0,100,100
--track1:Thickness,0,100,2
--Dialog:Color/col,col=0xffffff;
function lerp(a, b, t)
	return a * (1 - t) + b * t
end

function polyLine(x1, y1, x2, y2, w, col) --For making lines
    obj.load("figure", "Circle", col, w, w)
    obj.draw(x1, y1)
    obj.draw(x2, y2)
    obj.load("figure", "Square", col)
    local t = math.atan2(y1 - y2, x1 - x2)
    local off = {
        x1 = w/2 * math.cos(t-math.pi/2),
        x2 = w/2 * math.cos(t+math.pi/2),
        y1 = w/2 * math.sin(t-math.pi/2),
        y2 = w/2 * math.sin(t+math.pi/2)
    }
    obj.drawpoly(x1+off.x1, y1+off.y1, 0, x2+off.x1, y2+off.y1, 0, x2+off.x2, y2+off.y2, 0, x1+off.x2, y1+off.y2, 0)
end

function pointerp(a, b, t)
	return {lerp(a[1], b[1], t), lerp(a[2], b[2], t)}
end

function midpoint(a, b)
	return pointerp(a, b, 0.5)
end

amt = obj.track0 / 100
if posi ~= nil then
	local p1a, p2a, p1, p2, mid
	for i = 1, #posi - 1 do
		p1 = posi[i]
		p2 = posi[i + 1]
		mid = midpoint(p1, p2)
		p1a = pointerp(mid, p1, amt)
		p2a = pointerp(mid, p2, amt)
		polyLine(p1a[1], p1a[2], p2a[1], p2a[2], obj.track1, col)
	end
end

@Arc-Length Parameterization
--track0:Quality Mult,0,8,1
function dist(x0, y0, x, y)
	return math.sqrt((x - x0) ^ 2 + (y - y0) ^ 2)
end

tt = obj.totaltime
arcLength = {0}
nDiv = math.floor(obj.totalframe * obj.track0)

tx = 0
ty = 0
px = obj.getvalue("x", 0)
py = obj.getvalue("y", 0)
sum = 0

for i = 2, nDiv do
	local x = obj.getvalue("x", tt * i / nDiv)
	local y = obj.getvalue("y", tt * i / nDiv)
	sum = sum + dist(px, py, x, y)
	table.insert(arcLength, sum)
	px=x
	py=y
end

u = obj.time / tt
t = 0
tgt = u * sum
low = 1
high = #arcLength
idx = 1

while low < high do
	idx = low + math.floor((high - low) / 2)
	if arcLength[idx] < tgt then
		low = idx + 1
	else
		high = idx
	end
end
if arcLength[idx] > tgt then idx = idx - 1 end

pl = arcLength[idx]
if pl == tgt then
	t = tt * idx / nDiv
else
	t = tt * (idx + (tgt - pl) / (arcLength[idx + 1] - pl)) / nDiv
end
tx = obj.getvalue("x", t)
ty = obj.getvalue("y", t)
obj.ox = tx - obj.x
obj.oy = ty - obj.y

@TA-Curvy Text Thingy
--track0:Progress,0,100,50
--track1:Points,1,16,4
--track2:Rotate Offset,-360,360,0
--Dialog:Points,points={};Fade/chk,isFade=1;Zoom/chk,isZoom=0;
function combination(n, k)
	local res = 1
	for i = 0, k - 1 do
		res = res * ((n - i) / (i + 1))
	end
	return res
end

function constrain(x, l, h)
	if x < l then
		return l
	elseif x > h then
		return h
	else
		return x
	end
end

function smoothstep(l, h, x)
	local a = constrain((x - l) / (h - l), 0, 1)
	return a * a * (3 - 2 * x)
end

function bezier(n, t)
	local res = 0
	for i = 0, #n - 1 do
		res = res + combination(#n - 1, i) * math.pow(1 - t, #n - 1 - i) * math.pow(t, i) * n[i + 1]
	end
	return res
end

function epsilon()
	local eps = 1
	while 1 + 0.5 * eps ~= 1.0 do
		eps = 0.5 * eps
	end
	return math.sqrt(eps)
end

function envelope(x)
	if x < 0 then
		return 1 - math.abs(x)
	elseif x < 1 then
		return 1
	else
		return 2 - x
	end
end

idx = obj.index
n = obj.num
amt = (idx / n) + (obj.track0 / 25 - 2)

num = obj.track1
obj.setanchor("points", num, "line")
x = {}
y = {}

for i = 0, num - 1 do
	table.insert(x, points[i * 2 + 1])
	table.insert(y, points[i * 2 + 2])
end

nx = bezier(x, amt)
ny = bezier(y, amt)
pnx = bezier(x, amt - epsilon())
pny = bezier(y, amt - epsilon())
angle = math.deg(math.atan2(ny - pny, nx - pnx)) + obj.track2

obj.ox = nx
obj.oy = ny
obj.rz = angle
if isFade == 1 then
	obj.alpha = smoothstep(0, 1, envelope(amt))
end

if isZoom == 1 then
	obj.zoom = smoothstep(0, 1, envelope(amt))
end

@MWA Smoothing
--track0:Frame Margin,0,100,5,1
--track1:Window,0,2,0,1

function cosineWindow(x, m)
	if math.abs(x) > m then return 0 end
	return math.cos((math.pi * x) / (2 * m))
end

function gaussianWindow(x, m)
	local b = math.exp(1) / m
	return math.exp(-b * x * x)
end

function expWindow(x, m)
	local b = 2 * math.exp(1) / m
	return math.exp(-b * math.abs(x))
end

x = 0
y = 0
z = 0
zoom = 0
alpha = 0
aspect = 0
rx = 0
ry = 0
rz = 0
totalweight = 0
window = nil

if obj.track1 == 0 then
	window = cosineWindow
end

if obj.track1 == 1 then
	window = gaussianWindow
end

if obj.track1 == 2 then
	window = expWindow
end

for i = -obj.track0, obj.track0 do
	local weight = window(i, obj.track0)
	local frame = obj.time + (i / obj.framerate)
	totalweight = totalweight + weight
	x = x + obj.getvalue("x", frame) * weight
	y = y + obj.getvalue("y", frame) * weight
	z = z + obj.getvalue("z", frame) * weight
	zoom = zoom + obj.getvalue("zoom", frame) * weight
	alpha = alpha + obj.getvalue("alpha", frame) * weight
	aspect = aspect + obj.getvalue("aspect", frame) * weight
	rx = rx + obj.getvalue("rx", frame) * weight
	ry = ry + obj.getvalue("ry", frame) * weight
	rz = rz + obj.getvalue("rz", frame) * weight
end

obj.ox = (x / totalweight) - obj.x
obj.oy = (y / totalweight) - obj.y
obj.oz = (z / totalweight) - obj.z
obj.zoom = zoom / totalweight / 100
obj.alpha = alpha / totalweight
obj.aspect = aspect / totalweight
obj.rx = rx / totalweight
obj.ry = ry / totalweight
obj.rz = rz / totalweight

@Blink
--track0:Blinks,1,32,2,1
--track1:Duration (f),1,60,2,1
--track2:Blink On,0,1,1,1
--Dialog:Start/chk,isStart=1;End/chk,isEnd=1;

blinkerStart = math.floor(obj.frame / obj.track1)
blinkerEnd = math.floor((obj.totalframe - obj.frame) / obj.track1)

blinkStart = blinkerStart % 2
blinkEnd = blinkerEnd % 2

isblinkStart = blinkerStart / 2 <= obj.track0
isblinkEnd = blinkerEnd / 2 <= obj.track0


if (isStart == 1 and isblinkStart and blinkStart == obj.track2) or (isEnd == 1 and isblinkEnd and blinkEnd == obj.track2) then
	obj.alpha = 0
else
	obj.alpha = 1
end

@Change 2D Rotation Anchor
--track0:X%,0,100,50,0.01
--track1:Y%,0,100,50,0.01
--check0:Show Anchor,0
x = obj.w * obj.track0 / 100
y = obj.h * obj.track1 / 100
x = x - obj.w / 2
y = y - obj.h / 2
a = math.rad(obj.rz)
sin_a = math.sin(a)
cos_a = math.cos(a)
rot_x = x * cos_a - y * sin_a
rot_y = x * sin_a + y * cos_a
obj.ox = x - rot_x
obj.oy = y - rot_y
if obj.check0 then
    obj.draw()
    obj.load("figure", "Circle", 0x00ff00, 20, 20)
    obj.draw(x, y, 0, 1, 0.5)
end

@TA-Controllable Standard Intro
--track0:Progress%,0,100,0,0.01
--track1:Duration,0,5,0.3,0.01
--track2:Zoom%,0,1000,100
--dialog:Fade/chk,fade=0;X,xoff=0;Y,yoff=-128;Z,zoff=0;RotX,rx=0;RotY,ry=0;RotZ,rz=0;Accel[1-5],accel=2;
dur = obj.track1
zoom = obj.track2/100

function sign(x)
    if x > 0 then
        return 1
    elseif x < 0 then
        return -1
    end
    return 0
end

function progress(t, n)
    return obj.num * obj.getvalue(0, t) / 100 - n
end

function bisection(n, lo, hi)
    local l = lo
    local h = hi
    local c = (l + h) / 2
    for i = 1, 1024 do
        c = (l + h) / 2
        local fc = progress(c, n)
        local fl = progress(l, n)
        if fc == 0 or (h - l) / 2 < 0.0000001 then
            return c
        end
        
        if sign(fc) == sign(fl) then
            l = c
        else
            h = c
        end
    end
    return c
end

appear_time = bisection(obj.index, 0, obj.totaltime)
if dur == 0 then
    if obj.time > appear_time then
        obj.alpha = 1
    else
        obj.alpha = 0
    end
else
    if obj.time < appear_time then
        obj.alpha = 0
    else
        local amt = (appear_time - obj.time) / dur + 1
        amt = math.min(math.max(amt, 0), 1)^accel
        if fade == 1 then obj.alpha = 1 - amt end
        obj.ox = obj.ox + xoff * amt
        obj.oy = obj.oy + yoff * amt
        obj.oz = obj.oz + zoff * amt
        obj.zoom = obj.zoom * (1 - amt) + zoom * amt
        obj.rx = obj.rx + rx * amt
        obj.ry = obj.ry + ry * amt
        obj.rz = obj.rz + rz * amt
    end
end