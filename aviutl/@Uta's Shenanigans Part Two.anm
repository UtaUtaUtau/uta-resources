@Skew
--track0:Skew X,-100,100,0
--track1:Skew Y,-100,100,0
function skewing(x, y, sx, sy)
	return x + y * sx, x * sy + y
end

w2, h2 = obj.w / 2, obj.h / 2
sx, sy = obj.track0 / 100, obj.track1 / 100
x0, y0 = skewing(-w2, -h2, sx, sy)
x1, y1 = skewing(w2, -h2, sx, sy)
x2, y2 = skewing(w2, h2, sx, sy)
x3, y3 = skewing(-w2, h2, sx, sy)

obj.ox, obj.oy = skewing(obj.ox, obj.oy, sx, sy)
obj.drawpoly(x0, y0, 0, x1, y1, 0, x2, y2, 0, x3, y3, 0)

@TA-Rotate
--track0:Rotate X,-360,360,0
--track1:Rotate Y,-360,360,0
--track2:Rotate Z,-360,360,0
--check0:Rotate Objects,0
--Dialog:Rotation Multiplier,rotMul=1;
function rotate(x, y, z, rx, ry, rz)
	local gs = math.sin(rx)
	local gc = math.cos(rx)
	local bs = math.sin(ry)
	local bc = math.cos(ry)
	local as = math.sin(rz)
	local ac = math.cos(rz)

	return x * ac * bc + y * (ac * bs * gs - as * gc) + z * (ac * bs * gc + as * gs), x * as * bc + y * (as * bs * gs + ac * gc) + z * (as * bs * gc - ac * gs), -x * bs + y * bc * gs + z * bc * gc
end

rx = obj.track0 * rotMul
ry = obj.track1 * rotMul
rz = obj.track2 * rotMul

radX = math.rad(rx)
radY = math.rad(ry)
radZ = math.rad(rz)

obj.ox, obj.oy, obj.oz = rotate(obj.ox, obj.oy, obj.oz, radX, radY, radZ)

if obj.check0 then
	obj.rx = rx
	obj.ry = ry
	obj.rz = rz
end

@TA-Unified Scale
--track0:Zoom%,0,400,100
--track1:X,0,400,100
--track2:Y,0,400,100
obj.ox = obj.ox * (obj.track0 / 100) * (obj.track1 / 100)
obj.oy = obj.oy * (obj.track0 / 100) * (obj.track2 / 100)
obj.effect("Zoom%", "Zoom%", obj.track0, "X", obj.track1, "Y", obj.track2)

@TA-Per Object Delay
--track0:Delay (sec),0,10,0.05,0.01
--track1:Fade (sec),0,10,0,0.01
--track2:Reverse,0,1,0,1
--check0:Hide delayed objects,1

function clamp(x, l, h)
    if x < l then
        return l
    elseif x > h then
        return h
    end
    return x
end

currX = obj.getvalue("x")
currY = obj.getvalue("y")
currZ = obj.getvalue("z")
currZoom = obj.getvalue("zoom") / 100
currAlpha = obj.getvalue("alpha")
currAspect = obj.getvalue("aspect")
currRX = obj.getvalue("rx")
currRY = obj.getvalue("ry")
currRZ = obj.getvalue("rz")

debug_print(obj.zoom)

index = obj.index
if obj.track2 == 1 then
  index = obj.num - obj.index - 1
end

delayTime = clamp(obj.time - obj.track0 * index, 0, obj.totaltime)
delayX = obj.getvalue("x", delayTime)
delayY = obj.getvalue("y", delayTime)
delayZ = obj.getvalue("z", delayTime)
delayZoom = obj.getvalue("zoom", delayTime) / 100
delayAlpha = obj.getvalue("alpha", delayTime)
delayAspect = obj.getvalue("aspect", delayTime)
delayRX = obj.getvalue("rx", delayTime)
delayRY = obj.getvalue("ry", delayTime)
delayRZ = obj.getvalue("rz", delayTime)

obj.ox = obj.ox + delayX - currX
obj.oy = obj.oy + delayY - currY
obj.oz = obj.oz + delayZ - currZ
obj.zoom = delayZoom / (currZoom + 1e-16)
obj.alpha = delayAlpha / (currAlpha + 1e-16)
obj.aspect = obj.aspect + delayAspect - currAspect
obj.rx = obj.rx + delayRX - currRX
obj.ry = obj.ry + delayRY - currRY
obj.rz = obj.rz + delayRZ - currRZ

if obj.check0 then
    if obj.track1 == 0 then
        obj.alpha = (delayTime == 0) and 0 or obj.alpha
    else
        obj.alpha = obj.alpha * clamp(delayTime / obj.track1, 0, 1)
    end
end