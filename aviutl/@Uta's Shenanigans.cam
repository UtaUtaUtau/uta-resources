@Simple Proper Camera
--track0:Focal Length,0,8192,1024

cam = obj.getoption("camera_param")

cam.d = obj.track0
cam.tx = cam.x + cam.tx
cam.ty = cam.y + cam.ty
cam.tz = cam.z + cam.tz

obj.setoption("camera_param", cam)

@Simple Proper Camera + Rotation
--track0:Focal Length,0,8192,1024
--track1:Rotate X,-2160,2160,0
--track2:Rotate Y,-2160,2160,0

--Variable Declaration
d = obj.track0
rx = math.rad(obj.track1)
ry = math.rad(obj.track2+90)

cam = obj.getoption("camera_param")

cam.d = d
cam.tx = cam.x + (d * math.sin(ry) * math.sin(rx)) + cam.tx --y
cam.ty = cam.y + (d * math.cos(ry)) + cam.ty --z
cam.tz = cam.z + (d * math.sin(ry) * math.cos(rx)) + cam.tz --x

obj.setoption("camera_param", cam)

@Coordinate
--track0:X,-2000,2000,0
--track1:Y,-2000,2000,0
--track2:Z,-2000,2000,0

cam = obj.getoption("camera_param")

cam.x = cam.x + obj.track0
cam.y = cam.y + obj.track1
cam.z = cam.z + obj.track2

obj.setoption("camera_param", cam)

@Rotate
--track0:Progress,-100,100,0
--track1:Radius,0,2000,1024
--Dialog:XZ-Axis/chk,xz=1;XY-Axis/chk,xy=0;YZ-Axis,yz=0;Spins,spins=1;

cam = obj.getoption("camera_param")

r = obj.track1
a = 2 * spins * math.pi * obj.track0 / 100

if xy == 1 then
	cam.x = r * math.cos(a)
	cam.y = r * math.sin(a)
end

if yz == 1 then
	cam.y = r * math.cos(a)
	cam.z = r * math.sin(a)
end

if xz == 1 then
	cam.x = r * math.cos(a)
	cam.z = r * math.sin(a)
end

obj.setoption("camera_param", cam)

@Audio Reactive
--track0:Volume,0,500,100
--track1:Sample Size,1,1024,256,1
--track2:Smoothing,0,100,0
--Dialog:X,px=0;Y,py=0;Z,pz=0;Rotate Z,rz=0;
function lerp(a, b, t)
	return a * (1 - t) + b * t
end

function rootMeanSquare(table)
	local rms = 0
	for i = 1, #table do
		rms = rms + (table[i] / 32768)^2
	end
	return math.sqrt(rms / #table)
end

vol = obj.track0/100
smooth = obj.track2/100
buf = {}
obj.getaudio(buf, "audiobuffer", "pcm", obj.track1)
if amp == nil then
	amp = rootMeanSquare(buf)
else
	if obj.frame ~= 0 then
		amp = lerp(rootMeanSquare(buf), amp, smooth)
	else
		amp = rootMeanSquare(buf)
	end
end

cam = obj.getoption("camera_param")

cam.x = cam.x + px*vol*amp
cam.y = cam.y + py*vol*amp
cam.z = cam.z + pz*vol*amp
cam.rz = cam.rz + rz*vol*amp

obj.setoption("camera_param", cam)

@BPM Beat
--track0:Volume,0,500,100
--track1:BPM,0,1024,100
--track2:Mode,0,1,0,1
--track3:Offset,0,1024,0
--Dialog:Acceleration,e=5;X,px=0;Y,py=0;Z,pz=0;Target X,tx=0;Target Y,ty=0;Target Z,tz=0;Slope,rz=0;
vol = obj.track0/100
off = obj.track3/1024
bps = obj.track1/60

if amp == nil then
	amp = 1
else
	if obj.track2 == 0 then
		amp = (1 - (obj.time*bps)%1)^e
	else
		amp = math.abs(math.sin(math.pi*(obj.time*bps) + math.pi/2 + (math.pi/2)*off)^e)
	end
end

cam = obj.getoption("camera_param")

cam.x = cam.x + px*vol*amp
cam.y = cam.y + py*vol*amp
cam.z = cam.z + pz*vol*amp
cam.tx = cam.tx + tx*vol*amp
cam.ty = cam.ty + ty*vol*amp
cam.tz = cam.tz + tz*vol*amp
cam.rz = cam.rz + rz*vol*amp

obj.setoption("camera_param", cam)